if(!require(survival)) { install.packages("survival"); require(survival)}
# To calculate robust estimates of standard errors
if(!require(sandwich)) { install.packages("sandwich"); require(sandwich)}
if(!require(lmtest)) { install.packages("lmtest"); require(lmtest)}
# To plot results
if(!require(ggplot2)) { install.packages("ggplot2"); require(ggplot2)}
# To plot survival curves
if(!require(survminer)) { install.packages("survminer"); require(survminer)}
# To easily change data from long to wide
if(!require(reshape2)) { install.packages("reshape2"); require(reshape2)}
# For tidy code
if(!require(tidyverse)){ install.packages("tidyverse"); require(tidyverse)}
set_here()
# Load the data from the trial
trial <- read.csv(here("R/trial1.csv"), header=TRUE)
trial <- read.csv(here("R/trial1.csv"), header=TRUE)
table(trial$visit)
View(trial[1:100, c('simID', 'visit', 'rand')])
# Total person-time
nrow(trial)
# Sample size
n <- length(unique(trial$simID))
n
# Number of observations at each visit
table(trial$visit)
# Create 'maxVisit' - total amount of time each individual contributed
trial<-trial %>%
group_by(simID)%>%
mutate(
maxVisit = max(visit)
)
# The variable death is only '1' at end-of-followup
# Create 'deathOverall' - an indicator of whether an individual died at any
# point during follow-up
trial <- trial %>%
group_by(simID)%>%
mutate(
deathOverall = max(death)
)
# Total person-time
nrow(trial)
length(unique(trial$simID[trial$maxVisit >= 10]))
with(baseline, table(rand))
# Create 'maxVisit' - total amount of time each individual contributed
trial<-trial %>%
group_by(simID)%>%
mutate(
maxVisit = max(visit)
)
# The variable death is only '1' at end-of-followup
# Create 'deathOverall' - an indicator of whether an individual died at any
# point during follow-up
trial <- trial %>%
group_by(simID)%>%
mutate(
deathOverall = max(death)
)
# Create 'baseline' - data collected at visit 0
baseline <- trial %>%
dplyr::filter(visit == 0)
#Look at number of individuals in each arm, & deaths by arm
with(baseline, table(rand))
with(baseline, table(rand, deathOverall))
with(baseline, round(100*prop.table(table(rand, deathOverall), 1), 1))
# Use kaplan meier to nonparametrically estimate survival in each arm
# Note - this requires 1 observation per person of T (maxVisit - end of follow-up) and
# Delta (an indicator of whether death occurred at end of follow-up)
kmfit <- survfit(Surv(maxVisit, deathOverall) ~ rand, data = baseline)
summary(kmfit)
# Plot the output
ggsurvplot(kmfit,
data = baseline,
conf.int=F,
legend.labs = c("Placebo", "Treated"),
ylim = c(0.7, 1),
surv.scale = 'percent',
xlab = "Number of Visits",
title = "Kaplan-Meier Curve showing survival in each trial arm",
risk.table = TRUE,
break.time.by=2,
ggtheme = theme_bw())
png(filename = "ITTkm.png", width = 2*1024, height = 2*1024, units = 'px', res = 72*5)
# Calculate the unadjusted hazard ratio from a Cox PH model
cox_fit <- coxph(Surv(maxVisit, deathOverall) ~ rand, data = baseline, method='breslow')
summary(cox_fit)
# Calculate the unadjusted hazard ratio from a pooled logistic regression model
plr_fit <- glm(death ~ visit + visit2 + rand, data = trial, family=binomial())
coeftest(plr_fit, vcov=vcovHC(plr_fit, type="HC1")) # To get robust SE estimates
exp(coef(plr_fit)) # to get Hazard Ratios
rial <- trial%>%
mu# Data processing: create squared time variable [visit2]
ttate(
visit2 = visit*visit
)
# Calculate the unadjusted hazard ratio from a Cox PH model
cox_fit <- coxph(Surv(maxVisit, deathOverall) ~ rand, data = baseline, method='breslow')
summary(cox_fit)
# Calculate the unadjusted hazard ratio from a pooled logistic regression model
plr_fit <- glm(death ~ visit + visit2 + rand, data = trial, family=binomial())
coeftest(plr_fit, vcov=vcovHC(plr_fit, type="HC1")) # To get robust SE estimates
exp(coef(plr_fit)) # to get Hazard Ratios
rial <- trial%>%
mu# Data processing: create squared time variable [visit2]
ttate(
visit2 = visit*visit
)
# Data processing: create squared time variable [visit2]
trial <- trial%>%
mutate(
visit2 = visit*visit
)
# Calculate the unadjusted hazard ratio from a Cox PH model
cox_fit <- coxph(Surv(maxVisit, deathOverall) ~ rand, data = baseline, method='breslow')
summary(cox_fit)
# Calculate the unadjusted hazard ratio from a pooled logistic regression model
plr_fit <- glm(death ~ visit + visit2 + rand, data = trial, family=binomial())
coeftest(plr_fit, vcov=vcovHC(plr_fit, type="HC1")) # To get robust SE estimates
exp(coef(plr_fit)) # to get Hazard Ratios
n
baseline
0.8 ^ 5
0.1 ^ 4 * 0.8
0.1 ^ 4 * 0.8 + 0.8 ^ 5
(6.5+7.5+8.5) / 6
(6.5+7.5+8.5) / 6 + 6
8,75 * 3 / 6
8.75 * 3 / 6
( 5 + 6) / 3
( 5 + 6) / 6
5 * 1/ 6 + 6 / 6
(2.5 + 2.5 + 2.5 + 0.5) / 6
5.5 / 3
1/6 * (6 + 5 + 4)
(5 + 6 + 2.5 + 2.5 + 2.5 + 4.5) / 6
(5 + 6 + 4.5) / 6
N <- c(1,1,1,0,0,0)
nums <- 1:length(N)
nums
abs(N - 1)
nums * abs(N - 1)
sum(nums * abs(N - 1))
15/6
N <- c(1,1,1,1,0,0,0,0,1,0,1,0,1,1,0,1,0,0,0,1,0)
nums <- 1:length(N)
length(N)
sum(nums * abs(N - 1))
138/21
N <- c(1,1,1,1,0,0,0,0,1,0,1,0,1,1,0,1,0,0,0,1,0)
n <- length(n)
nums <- 1:n
sum(nums * abs(N - 1)) / n
N <- c(1,1,1,1,0,0,0,0,1,0,1,0,1,1,0,1,0,0,0,1,0)
n <- length(N)
nums <- 1:n
sum(nums * abs(N - 1)) / n
index <- (1:n) && (1:n < cut_off)
cut_off <- sum(nums * abs(N - 1)) / n
index <- (1:n) && (1:n < cut_off)
index
index <- (1:n) & (1:n < cut_off)
index
nums < cut_off
nums[which(nums < cut_off & N == 0)]
first_round <- nums[which(nums >= cut_off & N == 0)]
first_round <- nums[which(nums >= cut_off & N == 0)]
second_round <- nums[which(nums < cut_off & N == 0)]
first_round
second_round + sum(N == 1) / n * (-second_round) + cut_off
sum(N == 1) / n * (-second_round) + cut_off
N <- c(1, 1, 1, 0, 0, 0)
n <- length(N)
nums <- 1:n
nums
cut_off <- sum(nums * abs(N - 1)) / n
cut_off
first_round <- nums[which(nums >= cut_off & N == 0)]
first_round
cut_off
candidate <- which(N == 0)
candidate
candidate * sum(N) / n
candidate * sum(N) / n - reward_from_zero
reward_from_zero <- sum(nums * abs(N - 1)) / n
candidate <- which(N == 0)
candidate * sum(N) / n - reward_from_zero
reward_from_zero <- sum(nums * abs(N - 1)) / n
candidate <- which(N == 0)
-candidate * sum(N) / n + reward_from_zero
first_round <- which(-candidate * sum(N) / n + reward_from_zero <= 0)
first_round
candidate <- which(N == 0)
candidate
first_round <- candiate[which(-candidate * sum(N) / n + reward_from_zero <= 0)]
reward_from_zero <- sum(nums * abs(N - 1)) / n
candidate <- which(N == 0)
first_round <- candidate[which(-candidate * sum(N) / n + reward_from_zero <= 0)]
first_round
reward_from_zero <- sum(nums * abs(N - 1)) / n
candidate <- which(N == 0)
first_round <- candidate[which(-candidate * sum(N) / n + reward_from_zero <= 0)]
second_round <- nums[which(-candidate * sum(N) / n + reward_from_zero > 0))]
second_round <- nums[which(-candidate * sum(N) / n + reward_from_zero > 0)]
second_round
second_round <- candidate[which(-candidate * sum(N) / n + reward_from_zero > 0)]
second_round
first_round
which(-candidate * sum(N) / n + reward_from_zero > 0)
-candidate * sum(N) / n + reward_from_zero
detla_reward_second_round <- -candidate * sum(N) / n + reward_from_zero
detla_reward_second_round
first_round <- candidate[detla_reward_second_round <= 0]
first_round
first_round <- candidate[detla_reward_second_round <= 0]
second_round <- candidate[detla_reward_second_round > 0)]
first_round <- candidate[detla_reward_second_round <= 0]
second_round <- candidate[detla_reward_second_round > 0]
first_round
second_round
detla_reward_second_round > 0
value_second_round <- second_round + detla_reward_second_round[detla_reward_second_round > 0]
value_second_round
(value_first_round + value_second_round) / n * sum(N == 0)
value_first_round <- first_round
value_second_round <- second_round + detla_reward_second_round[detla_reward_second_round > 0]
(value_first_round + value_second_round) / n * sum(N == 0)
value_first_round
(sum(value_first_round) + sum(value_second_round)) / n * sum(N == 0)
sum(value_first_round)
(sum(value_first_round) + sum(value_second_round))
15.5 / 6
(sum(value_first_round) + sum(value_second_round)) / n
N <- c(1,1,1,1,0,0,0,0,1,0,1,0,1,1,0,1,0,0,0,1,0)
n <- length(N)
nums <- 1:n
reward_from_zero <- sum(nums * abs(N - 1)) / n
candidate <- which(N == 0)
detla_reward_second_round <- -candidate * sum(N) / n + reward_from_zero
first_round <- candidate[detla_reward_second_round <= 0]
second_round <- candidate[detla_reward_second_round > 0]
value_first_round <- first_round
value_second_round <- second_round + detla_reward_second_round[detla_reward_second_round > 0]
(sum(value_first_round) + sum(value_second_round)) / n
N <- c(1,1,1,1,1,1,0,1,0,1,1,0,1,0,1,0,0,1,0,0,1,0)
n <- length(N)
nums <- 1:n
reward_from_zero <- sum(nums * abs(N - 1)) / n
candidate <- which(N == 0)
detla_reward_second_round <- -candidate * sum(N) / n + reward_from_zero
first_round <- candidate[detla_reward_second_round <= 0]
second_round <- candidate[detla_reward_second_round > 0]
value_first_round <- first_round
value_second_round <- second_round + detla_reward_second_round[detla_reward_second_round > 0]
(sum(value_first_round) + sum(value_second_round)) / n
N <- c(1,1,1,1,0,0,0,0,1,0,1,0,1,1,0,1,0,0,0,1,0}
n <- length(N)
nums <- 1:n
reward_from_zero <- sum(nums * abs(N - 1)) / n
candidate <- which(N == 0)
detla_reward_second_round <- -candidate * sum(N) / n + reward_from_zero
first_round <- candidate[detla_reward_second_round <= 0]
second_round <- candidate[detla_reward_second_round > 0]
value_first_round <- first_round
value_second_round <- second_round + detla_reward_second_round[detla_reward_second_round > 0]
(sum(value_first_round) + sum(value_second_round)) / n
N <- c(1,1,1,1,0,0,0,0,1,0,1,0,1,1,0,1,0,0,0,1,0)
n <- length(N)
n
N <- c(1,1,1,1,0,0,0,0,1,0,1,0,1,1,0,1,0,0,0,1,0)
n <- length(N)
nums <- 1:n
reward_from_zero <- sum(nums * abs(N - 1)) / n
candidate <- which(N == 0)
detla_reward_second_round <- -candidate * sum(N) / n + reward_from_zero
first_round <- candidate[detla_reward_second_round <= 0]
second_round <- candidate[detla_reward_second_round > 0]
value_first_round <- first_round
value_second_round <- second_round + detla_reward_second_round[detla_reward_second_round > 0]
(sum(value_first_round) + sum(value_second_round)) / n
N <- c(1,1,1,1,0,0,0,0,1,0,1,0,1,1,0,1,0,0,0,1,0)
n <- length(N)
nums <- 1:n
reward_from_zero <- sum(nums * abs(N - 1)) / n
reward_from_zero
candidate <- which(N == 0)
candidate
detla_reward_second_round <- -candidate * sum(N) / n + reward_from_zero
detla_reward_second_round
first_round <- candidate[detla_reward_second_round <= 0]
second_round <- candidate[detla_reward_second_round > 0]
first_round
second_round
value_first_round <- first_round
value_second_round <- second_round + detla_reward_second_round[detla_reward_second_round > 0]
value_second_round
reward_from_zero
-candidate * sum(N) / n
-candidate * sum(N) / n + reward_from_zero
first_round <- candidate[detla_reward_second_round <= 0]
second_round <- candidate[detla_reward_second_round > 0]
value_first_round <- first_round
value_second_round <- second_round + detla_reward_second_round[detla_reward_second_round > 0]
value_second_round
second_round
first_round <- candidate[detla_reward_second_round <= 0]
second_round <- candidate[detla_reward_second_round > 0]
second_round
value_second_round <- second_round + detla_reward_second_round[detla_reward_second_round > 0]
value_second_round
sum(N == 1)
reward_from_zero
-10 * 10 / 21 + reward_from_zero
-11 * 10 / 21 + reward_from_zero
-12 * 10 / 21 + reward_from_zero
-13 * 10 / 21 + reward_from_zero
-15 * 10 / 21 + reward_from_zero
1/6 * (8 + 9 + 10)
17 / 3
23 / 5 + 2
lambda <- 0.403032
(1 - lambda) * 5.5 + lambda * (1 - lambda) * 4 + lambda ^ 2 * (1 - lambda) * 4 + lambda ^ 3 * (1 - lambda) * 6 + lambda ^ 4 * 5
-lambda ^ 4 + 2 * lambda ^ 3 - 1.5 * lambda + 0.5
0.64 * (-2.4 + 4.9) + 0.36 * (9.6 + 7.8)
0.64 * (-2.4 - 7.8 - 2.3) + 0.36 * (9.6 + 0.1 - 2.3)
0.64 * (-2.4 - 7.8 - 2.3) + 0.36 * (9.6 + 0.1 - 2.3)
0.64 * (-2.4 - 7.8 + 3.4 + 25.5) + 0.36 * (9.6 + 0.1 + 3.4 + 25.5)
0.64 * (-2.4 - 7.8 + 3.4 - 2.1 - 10.2) + 0.36 * (9.6 + 0.1 + 3.4 - 2.1 - 10.2)
0.64 * (-2.4 - 7.8 + 3.4 - 2.1 + 7.9 - 6.5) + 0.36 * (9.6 + 0.1 + 3.4 - 2.1 + 7.9 - 6.5)
lambda <- 0.20550275877409016
-lambda ^ 4 *11.599999999999998 -37.800000000000004 * lambda ^ 3 + 31.200000000000003 * lambda ^ 2 - 31.200000000000003 * lambda + 8.2
lambda <- 0.20550275877409016
(1 - lambda) * 7.864 +
lambda * (1 - lambda) * (-5.336) +
lambda ^ 2 * (1 - lambda) * 25.864000000000004
+ lambda ^ 3 * (1 - lambda) * (-11.935999999999998)
+ lambda ^ 4 * (-0.3359999999999994)
(1 - lambda) * 7.864 + lambda * (1 - lambda) * (-5.336) + lambda ^ 2 * (1 - lambda) * 25.864000000000004 + lambda ^ 3 * (1 - lambda) * (-11.935999999999998) + lambda ^ 4 * (-0.3359999999999994)
lambda <- 0.20550275877409016
(1 - lambda) * 7.864 + lambda * (1 - lambda) * (-5.336) + lambda ^ 2 * (1 - lambda) * 25.864000000000004 + lambda ^ 3 * (1 - lambda) * (-11.935999999999998)
(1 - lambda) * 7.864 + lambda * (1 - lambda) * (-5.336) + lambda ^ 2 * (1 - lambda) * 25.864000000000004 + lambda ^ 3 * (1 - lambda) * (-11.935999999999998) + lambda ^ 4 * (1 - lambda) * (-0.3359999999999994)
(1 - lambda) * 7.864 + lambda * (1 - lambda) * (-5.336) + lambda ^ 2 * (1 - lambda) * 25.864000000000004 + lambda ^ 3 * (1 - lambda) * (-11.935999999999998) + lambda ^ 4  * (-0.3359999999999994)
0.64 * (-24.-7.8) + 0.36 * (9.6 + 0.1) + 3.4 - 2.1 + 7.9
0.64 * (-2.4-7.8) + 0.36 * (9.6 + 0.1) + 3.4 - 2.1 + 7.9
6.164 - 6.161618
lambda ^ 4  * (-0.3359999999999994)
(1 - lambda) * 7.864 + lambda * (1 - lambda) * (-5.336) + lambda ^ 2 * (1 - lambda) * 25.864000000000004 + lambda ^ 3 * (1 - lambda) * (-11.935999999999998) + lambda ^ 4 * (-0.3359999999999994)
lambda <- 0.49567093118984556
(1 - lambda) * (-0.49567093118984556) + lambda * (1 - lambda) * (28.326) + lambda ^ 2 * (1 - lambda) * 22.126 + lambda ^ 3 * (1 - lambda) * (14.325999999999999) + lambda ^ 4 * (23.526
)
lambda <- 0.49567093118984556
(1 - lambda) * (-0.49567093118984556) + lambda * (1 - lambda) * (28.326) + lambda ^ 2 * (1 - lambda) * 22.126 + lambda ^ 3 * (1 - lambda) * (14.325999999999999) + lambda ^ 4 * (1 - lambda) * (23.526
)
lambda <- 0.4789686066878079
(1 - lambda) * (-0.49567093118984556) + lambda * (1 - lambda) * (28.326) + lambda ^ 2 * (1 - lambda) * 22.126 + lambda ^ 3 * (1 - lambda) * (14.325999999999999) + lambda ^ 4 * (23.526
lambda <- 0.4789686066878079
(1 - lambda) * (-0.49567093118984556) + lambda * (1 - lambda) * (28.326) + lambda ^ 2 * (1 - lambda) * 22.126 + lambda ^ 3 * (1 - lambda) * (14.325999999999999) + lambda ^ 4 * (23.526
)
lambda <- 0.49567093118984556
(1 - lambda) * (-0.49567093118984556) + lambda * (1 - lambda) * (28.326) + lambda ^ 2 * (1 - lambda) * 22.126 + lambda ^ 3 * (1 - lambda) * (14.325999999999999) + lambda ^ 4 * (23.526
)
lambda <- 0.49567093118984556
(1 - lambda) * (-1.0479999999999998) + lambda * (1 - lambda) * (28.326) + lambda ^ 2 * (1 - lambda) * 22.126 + lambda ^ 3 * (1 - lambda) * (14.325999999999999) + lambda ^ 4 * (23.526
)
lambda <- 0.49567093118984556
(1 - lambda) * (-1.0479999999999998) + lambda * (1 - lambda) * (28.326) + lambda ^ 2 * (1 - lambda) * 22.126 + lambda ^ 3 * (1 - lambda) * (14.325999999999999) + lambda ^ 4 * (1 - lambda) * (23.526
)
lambda <- 0.49567093118984556
(1 - lambda) * (-1.0479999999999998) + lambda * (1 - lambda) * (28.326) + lambda ^ 2 * (1 - lambda) * 22.126 + lambda ^ 3 * (1 - lambda) * (14.325999999999999) +
0
(1 - lambda) * (-1.0479999999999998) + lambda * (1 - lambda) * (28.326) + lambda ^ 2 * (1 - lambda) * 22.126 + lambda ^ 3 * (1 - lambda) * (14.325999999999999) + lambda ^ 4 * (1 - lambda) * (23.526
)
lambda <- 0.49567093118984556
(1 - lambda) * (-1.0479999999999998) + lambda * (1 - lambda) * (28.326) + lambda ^ 2 * (1 - lambda) * 22.126 + lambda ^ 3 * (1 - lambda) * (14.325999999999999) + lambda ^ 4 * (23.526
)
11.59401 - 11.225999999999
lambda <- 0.20550275877409016
(1 - lambda) * (7.864) + lambda * (1 - lambda) * (-5.336) + lambda ^ 2 * (1 - lambda) * 25.864000000000004 + lambda ^ 3 * (1 - lambda) * (-11.935999999999998) + lambda ^ 4 * (-0.3359999999999994
)
(1 - lambda) * (7.864) + lambda * (1 - lambda) * (-5.336) + lambda ^ 2 * (1 - lambda) * 25.864000000000004 + lambda ^ 3 * (1 - lambda) * (-11.935999999999998) + lambda ^ 4 * (1 - lambda) *(-0.3359999999999994
)
kkk <- (1 - lambda) * E[1] + lambda * (1 - lambda) * E[2] + lambda ^ 2 * (1 - lambda) * E[3] + lambda ^ 3 * (1 - lambda) * E[4] + lambda ^ 4 * (1 - lambda) *E[5]
lambda <- 0.20550275877409016
E <- c(7.864, -5.336, 25.864000000000004, -11.935999999999998, -0.3359999999999994)
kkk <- (1 - lambda) * E[1] + lambda * (1 - lambda) * E[2] + lambda ^ 2 * (1 - lambda) * E[3] + lambda ^ 3 * (1 - lambda) * E[4] + lambda ^ 4 * (1 - lambda) *E[5]
kkk
kkk + lambda ^ 5 * 6.164
0.5 + 0.5 ^ 2+ 0.5 ^ 3+ 0.5 ^4 + 0.5 ^5 * 2
0.5 + 0.5 ^ 2+ 0.5 ^ 3+ 0.5 ^4 + 0.5 ^5  + 0.5 ^ 6 *2
0.5 + 0.5 ^ 2+ 0.5 ^ 3+ 0.5 ^4 * 2
0.5 ^2
0.5 ^3
0.5 ^4
0.5 ^5
0.5 ^6
powers <- 1:30
output <- data.frame(powers, 0.5 ^ powers)
output
names(output) <- names("power", "values")
powers <- 1:30
output <- data.frame(powers, 0.5 ^ powers)
names(output) <- c("power", "values")
cumsum(output$values)
1 - cumsum(output$values)
powers <- 1:30
output <- data.frame(powers, 0.5 ^ powers)
names(output) <- c("power", "values")
output$comp <- 1 - cumsum(output$values)
output
powers <- 1:30
output <- data.frame(powers, 0.5 ^ powers)
names(output) <- c("power", "values")
output$comp <- 1 - round(cumsum(output$values), 10)
powers <- 1:30
output <- data.frame(powers, 0.5 ^ powers)
names(output) <- c("power", "values")
output$values <- round(output$values, 10)
output$comp <- 1 - cumsum(output$values)
outpuy
output
powers <- 1:30
output <- data.frame(powers, 0.5 ^ powers)
names(output) <- c("power", "values")
output$values <- round(output$values, 20)
output$comp <- 1 - cumsum(output$values)
output
options(scipen = 999)
powers <- 1:30
output <- data.frame(powers, 0.5 ^ powers)
names(output) <- c("power", "values")
output$values <- round(output$values, 20)
output$comp <- 1 - cumsum(output$values)
output
rm(list=ls(all=TRUE))
library(dplyr)
library(orientlib)
library(spdep)
setwd("C:/Users/Owner/Dropbox/Sijun_Research/BTW analysis")
dataSet <- read.csv("ZDEVICEMOTION_SUNDAY06092019.csv", header = T)
dataSet <- dataSet %>% mutate(gravity = sqrt(ZGRAVITYX ^ 2 + ZGRAVITYY ^2 + ZGRAVITYZ ^ 2))
# dataSet <- dataSet %>% mutate(user_acc = sqrt(ZUSERACCELX ^ 2 + ZUSERACCELY ^ 2 + ZUSERACCELZ ^ 2))
# calcualte the unit vector at the gravity direction
dataSet <- dataSet %>% mutate(unit_ZGRAVITYX = ZGRAVITYX / gravity)
dataSet <- dataSet %>% mutate(unit_ZGRAVITYY = ZGRAVITYY / gravity)
dataSet <- dataSet %>% mutate(unit_ZGRAVITYZ = ZGRAVITYZ / gravity)
# calculate the magnitude of user accelaration to the gravity
dataSet <- dataSet %>% mutate(user_acc_to_gravity = -ZUSERACCELX * unit_ZGRAVITYX - ZUSERACCELY * unit_ZGRAVITYY - ZUSERACCELZ * unit_ZGRAVITYZ)
####################################################################################################################
# rotate matrix
dirCols <- c("ZQUATX", "ZQUATY", "ZQUATZ","ZQUATW")
rotateMatrics <- rotmatrix(quaternion(as.matrix(dataSet[, dirCols])))
dataSet$row_nums <- 1:dim(dataSet)[1]
rotateXYZ <- function(data, rotateMatrics) {
index <- data[1]
x <- data[2]
y <- data[3]
z <- data[4]
rotated_matrix <- rotateMatrics[[index]]
inverse_rotateMatrix <- solve(rotated_matrix)
rotated_xyz <- inverse_rotateMatrix %*% c(x, y, z)
return(rotated_xyz)
}
getDirection <- function(angle) {
if (angle > 180) {
angle <- angle - 360
}
return(angle)
}
calculateAngle <- function(data) {
x1 <- data[1]
y1 <- data[2]
x2 <- data[3]
y2 <- data[4]
theta <- acos((x1 * x2 + y1 * y2) / sqrt(x1 ^ 2 + y1 ^2))
return(theta)
}
dirCols <- c("row_nums", "ZUSERACCELX", "ZUSERACCELY","ZUSERACCELZ")
outcomes <- t(apply(dataSet[, dirCols], 1, rotateXYZ, rotateMatrics = rotateMatrics))
outcomes <- data.frame(outcomes)
names(outcomes) <- c("original_x", "original_y", "original_z")
dataSet <- data.frame(dataSet, outcomes)
dirCols <- c("row_nums", "ZGRAVITYX", "ZGRAVITYY","ZGRAVITYZ")
magnifieldXYZ <- t(apply(dataSet[, dirCols], 1, rotateXYZ, rotateMatrics = rotateMatrics))
magnifieldXYZ <- data.frame(magnifieldXYZ)
names(magnifieldXYZ) <- c("x", "y", "z")
dataSet <- data.frame(dataSet, magnifieldXYZ)
sign(dataSet$ZHEADING - 180)
dataSet$time <- as.numeric(substr(dataSet$ZTIMESTAMPEST, 28,29))
dataSet$diff_z <- dataSet$original_z - dataSet$user_acc_to_gravity
summary(dataSet$diff_z)
non_duplicated_index <- which(!duplicated(dataSet$time))
plot(dataSet$original_y, type="b", xaxt = "n", ylim=c(-0.6, 0.6))
axis(1, at = non_duplicated_index, labels = dataSet$time[non_duplicated_index])
# points(sign(dataSet$magnifield_x), type="l")
abline(h = -0.3, lty = 2, col = 2)
abline(h = 0.3, lty = 2, col = 2)
plot(dataSet$original_x , type="b", xaxt = "n", ylim=c(-0.6, 0.6))
axis(1, at = non_duplicated_index, labels = dataSet$time[non_duplicated_index])
# points(sign(dataSet$magnifield_x), type="l")
abline(h = -0.3, lty = 2, col = 2)
abline(h = 0.3, lty = 2, col = 2)
dataSet$XY <- sqrt(dataSet$original_x ^ 2 + dataSet$original_y ^ 2)
plot(dataSet$XY, type="b", xaxt = "n")
axis(1, at = non_duplicated_index, labels = dataSet$time[non_duplicated_index])
abline(h = -0.3, lty = 2, col = 2)
abline(h = 0.3, lty = 2, col = 2)
non_duplicated_index <- which(!duplicated(dataSet$time))
plot(dataSet$original_y, type="b", xaxt = "n", col = 1, lty = 1, lwd = 1, ylim = c(-0.6, 0.6))
points(dataSet$original_x, type="b", col = 2, lty = 2, lwd = 2, pch = 2)
axis(1, at = non_duplicated_index, labels = dataSet$time[non_duplicated_index])
abline(h = -0.3, lty = 3, col = 3)
abline(h = 0.3, lty = 3, col = 3)
summary(dataSet$original_z)
1 * cos(pi / 6) + 1 * sin(pi / 6)
